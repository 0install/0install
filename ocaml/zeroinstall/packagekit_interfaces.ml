(* File auto-generated by obus-gen-interface and then edited by hand to include calls from multiple versions. *)
open Dbus.OBus_value
open Dbus.OBus_value.C
open Dbus.OBus_member

module Org_freedesktop_PackageKit =
struct
  let interface = "org.freedesktop.PackageKit"
  let m_CreateTransaction = { (* Since 0.8.1 *)
    Method.interface = interface;
    Method.member = "CreateTransaction";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (None, basic_object_path));
    Method.annotations = [];
  }
  let m_GetTid = {  (* Before 0.8.1 *)
    Method.interface = interface;
    Method.member = "GetTid";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "tid", basic_string));
    Method.annotations = [("org.freedesktop.DBus.GLib.Async", "")];
  }
  let p_VersionMajor = {
    Property.interface = interface;
    Property.member = "VersionMajor";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_VersionMicro = {
    Property.interface = interface;
    Property.member = "VersionMicro";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_VersionMinor = {
    Property.interface = interface;
    Property.member = "VersionMinor";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
end

module Org_freedesktop_PackageKit_Transaction =
struct
  let interface = "org.freedesktop.PackageKit.Transaction"
  let m_InstallPackages = {  (* 0.5.x *)
    Method.interface = interface;
    Method.member = "InstallPackages";
    Method.i_args = (arg2
                       (Some "only_trusted", basic_boolean)
                       (Some "package_ids", array basic_string));
    Method.o_args = (arg0);
    Method.annotations = [("org.freedesktop.DBus.GLib.Async", "")];
  }
  let m_InstallPackages2 = {  (* Since 0.8.1 *)
    Method.interface = interface;
    Method.member = "InstallPackages";
    Method.i_args = (arg2
                       (Some "transaction_flags", basic_uint64)
                       (Some "package_ids", array basic_string));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_Resolve = { (* Before 0.8.1 *)
    Method.interface = interface;
    Method.member = "Resolve";
    Method.i_args = (arg2
                       (Some "filter", basic_string)
                       (Some "packages", array basic_string));
    Method.o_args = (arg0);
    Method.annotations = [("org.freedesktop.DBus.GLib.Async", "")];
  }
  let m_Resolve2 = {  (* Since 0.8.1 *)
    Method.interface = interface;
    Method.member = "Resolve";
    Method.i_args = (arg2
                       (Some "filter", basic_uint64)
                       (Some "packages", array basic_string));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_GetDetails = {
    Method.interface = interface;
    Method.member = "GetDetails";
    Method.i_args = (arg1
                       (Some "package_ids", array basic_string));
    Method.o_args = (arg0);
    Method.annotations = [("org.freedesktop.DBus.GLib.Async", "")];
  }
  let m_SetHints = {
    Method.interface = interface;
    Method.member = "SetHints";
    Method.i_args = (arg1
                       (Some "hints", array basic_string));
    Method.o_args = (arg0);
    Method.annotations = [("org.freedesktop.DBus.GLib.Async", "")];
  }
  let m_SetLocale = {
    Method.interface = interface;
    Method.member = "SetLocale";
    Method.i_args = (arg1
                       (Some "locale", basic_string));
    Method.o_args = (arg0);
    Method.annotations = [("org.freedesktop.DBus.GLib.Async", "")];
  }
  let m_Cancel = {
    Method.interface = interface;
    Method.member = "Cancel";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [("org.freedesktop.DBus.GLib.Async", "")];
  }
  let s_ErrorCode = { (* Before 0.8.1 *)
    Signal.interface = interface;
    Signal.member = "ErrorCode";
    Signal.args = (arg2
                       (Some "code", basic_string)
                       (Some "details", basic_string));
    Signal.annotations = [];
  }
  let s_ErrorCode2 = {    (* 0.8.1 *)
    Signal.interface = interface;
    Signal.member = "ErrorCode";
    Signal.args = (arg2
                       (Some "code", basic_uint32)
                       (Some "details", basic_string));
    Signal.annotations = [];
  }
  let s_Finished1 = {  (* ..!0.8.1 *)
    Signal.interface = interface;
    Signal.member = "Finished";
    Signal.args = (arg2
                       (Some "exit", basic_string)
                       (Some "runtime", basic_uint32));
    Signal.annotations = [];
  }
  let s_Finished2 = {  (* 0.8.1.. *)
    Signal.interface = interface;
    Signal.member = "Finished";
    Signal.args = (arg2
                       (Some "exit", basic_uint32)
                       (Some "runtime", basic_uint32));
    Signal.annotations = [];
  }
  let s_Package1 = {  (* ..!0.8.1 *)
    Signal.interface = interface;
    Signal.member = "Package";
    Signal.args = (arg3
                       (Some "info", basic_string)
                       (Some "package_id", basic_string)
                       (Some "summary", basic_string));
    Signal.annotations = [];
  }
  let s_Package2 = {  (* 0.8.1.. *)
    Signal.interface = interface;
    Signal.member = "Package";
    Signal.args = (arg3
                       (Some "info", basic_uint32)
                       (Some "package_id", basic_string)
                       (Some "summary", basic_string));
    Signal.annotations = [];
  }
  let s_Details1 = {
    Signal.interface = interface;
    Signal.member = "Details";
    Signal.args = (arg6
                       (Some "package_id", basic_string)
                       (Some "license", basic_string)
                       (Some "group", basic_string)
                       (Some "detail", basic_string)
                       (Some "url", basic_string)
                       (Some "size", basic_uint64));
    Signal.annotations = [];
  }
  let s_Details2 = {
    Signal.interface = interface;
    Signal.member = "Details";
    Signal.args = (arg6
                       (Some "package_id", basic_string)
                       (Some "license", basic_string)
                       (Some "group", basic_uint32)
                       (Some "detail", basic_string)
                       (Some "url", basic_string)
                       (Some "size", basic_uint64));
    Signal.annotations = [];
  }
  let s_Details3 = {
    Signal.interface = interface;
    Signal.member = "Details";
    Signal.args = (arg1
                       (Some "data", dict string variant));
    Signal.annotations = [("org.qtproject.QtDBus.QtTypeName.In0", "QVariantMap")];
  }
  let p_Percentage = {
    Property.interface = interface;
    Property.member = "Percentage";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
end

