#!/usr/bin/env python
import os, sys
from optparse import OptionParser

from zeroinstall.injector import model, download, autopolicy, run

parser = OptionParser(usage="usage: %prog [options] interface [args]\n"
			    "       %prog --list [search-term]")
parser.add_option("-c", "--console", help="never use GUI", action='store_false', dest='gui')
parser.add_option("-d", "--download-only", help="fetch but don't run", action='store_true')
parser.add_option("-g", "--gui", help="show graphical policy editor", action='store_true')
parser.add_option("-l", "--list", help="list all known interfaces", action='store_true')
parser.add_option("-q", "--quiet", help="suppress informational messages", action='store_true')
parser.add_option("-r", "--refresh", help="refresh all used interfaces", action='store_true')
parser.add_option("-v", "--verbose", help="more verbose output", action='store_true')
parser.add_option("-V", "--version", help="display version information", action='store_true')
parser.disable_interspersed_args()

(options, args) = parser.parse_args()

if options.list:
	if len(args) == 0:
		match = None
	elif len(args) == 1:
		match = args[0].lower()
	else:
		parser.print_help()
		sys.exit(1)
	from zeroinstall.injector import reader
	for i in reader.list_all_interfaces():
		if match and match not in i.lower(): continue
		print i
	sys.exit(0)

if options.version:
	import zeroinstall
	print "0launch (zero-install) " + zeroinstall.version
	print "Copyright (C) 2005 Thomas Leonard"
	print "This program comes with ABSOLUTELY NO WARRANTY,"
	print "to the extent permitted by law."
	print "You may redistribute copies of this program"
	print "under the terms of the GNU General Public License."
	print "For more information about these matters, see the file named COPYING."
	sys.exit(0)

if len(args) < 1:
	parser.print_help()
	sys.exit(1)

if options.gui is None and os.environ.get('DISPLAY', None):
	if options.refresh:
		options.gui = True
	else:
		# Decide whether to use the GUI or not...
		try:
			test_policy = autopolicy.AutoPolicy(args[0], False, quiet = True)
			test_policy.recalculate()
			test_policy.start_downloading_impls()
		except autopolicy.NeedDownload:
			if not options.quiet:
				print "Need to download; switching to GUI mode"
			options.gui = True
	
if options.gui:
	interface_uri = 'http://0install.net/2005/interfaces/injector-gui'
	prog_args = args[:]
	if options.download_only:
		options.download_only = False
		prog_args.insert(0, '-d')
else:
	interface_uri = args[0]
	prog_args = args[1:]

# Singleton instance used everywhere...
policy = autopolicy.AutoPolicy(interface_uri, True,
				quiet = bool(options.quiet),
				verbose = bool(options.verbose),
				download_only = bool(options.download_only))
policy.recalculate()

if options.refresh:
	for x in policy.walk_interfaces():
		policy.begin_iface_download(x, False)

# Get interfaces...
try:
	policy.wait_for_downloads()
except model.SafeException, ex:
	print >>sys.stderr, ex
	sys.exit(1)

try:
	policy.execute(prog_args)
except model.SafeException, ex:
	if policy.network_use != model.network_full:
		if not options.quiet:
			print >>sys.stderr, "Error. Retrying with network use = full"
		policy.network_use = model.network_full	
		policy.recalculate()
		try:
			policy.execute(prog_args)
		except model.SafeException, ex:
			print >>sys.stderr, ex
	else:
		print >>sys.stderr, ex
