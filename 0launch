#!/usr/bin/env python
import os, sys
import shutil
from zeroinstall.injector import model, download, gpg, policy, download, gpg, run

__builtins__._ = lambda x: x

if len(sys.argv) < 2:
	print "Usage: 0launch-auto INTERFACE [ARGS]"
	print "Eg:"
	print "0launch http://example.com/myprog.xml --help"
	sys.exit(1)
interface_uri = sys.argv[1]
if not interface_uri.startswith('http:'):
	interface_uri = os.path.realpath(interface_uri)	# For testing
prog_args = sys.argv[2:]

class AutoPolicy(policy.Policy):
	monitored_downloads = None

	def __init__(self, interface_uri):
		policy.Policy.__init__(self, interface_uri)
		self.monitored_downloads = []

	def monitor_download(self, dl):
		error_stream = dl.start()
		self.monitored_downloads.append((error_stream, dl))

	def start_downloading_impls(self):
		for iface, impl in self.get_uncached_implementations():
			if not impl.download_sources:
				raise model.SafeException("Implementation " + impl.id + " of "
					"interface " + iface.get_name() + " cannot be "
					"downloaded (no download locations given in "
					"interface!")
			dl = download.begin_impl_download(impl.download_sources[0])
			self.monitor_download(dl)

# Singleton instance used everywhere...
auto_policy = AutoPolicy(interface_uri)
auto_policy.recalculate()

def wait_for_downloads():
	while auto_policy.monitored_downloads:
		print "Currently downloading:"
		for e, dl in auto_policy.monitored_downloads:
			print "- " + dl.url

		for e, dl in auto_policy.monitored_downloads[:]:
			errors =  e.read()
			if errors:
				dl.error_stream_data(errors)
				continue
			e.close()
			auto_policy.monitored_downloads.remove((e, dl))
			data = dl.error_stream_closed()
			if isinstance(dl, download.InterfaceDownload):
				auto_policy.check_signed_data(dl, data)
			elif isinstance(dl, download.ImplementationDownload):
				auto_policy.add_to_cache(dl.source, data)
			else:
				raise Exception("Unknown download type %s" % dl)

def execute():
	auto_policy.start_downloading_impls()

	wait_for_downloads()
		
	run.execute(auto_policy, prog_args)

# Get interfaces...
try:
	wait_for_downloads()
except model.SafeException, ex:
	print >>sys.stderr, ex
	sys.exit(1)

try:
	execute()
except model.SafeException, ex:
	if auto_policy.network_use != model.network_full:
		print >>sys.stderr, "Error. Retrying with network use = full"
		auto_policy.network_use = model.network_full	
		auto_policy.recalculate()
		try:
			execute()
		except model.SafeException, ex:
			print >>sys.stderr, ex
	else:
		print >>sys.stderr, ex
