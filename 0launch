#!/usr/bin/env python
import os, sys
from optparse import OptionParser
import logging

parser = OptionParser(usage="usage: %prog [options] interface [args]\n"
			    "       %prog --list [search-term]\n"
			    "       %prog --import [signed-interface-files]\n"
			    "       %prog --add-feed [local-interface-files]")
parser.add_option("-a", "--add-feed", help="add a local feed", action='store_true')
parser.add_option("-c", "--console", help="never use GUI", action='store_false', dest='gui')
parser.add_option("-d", "--download-only", help="fetch but don't run", action='store_true')
parser.add_option("-D", "--dry-run", help="just print actions", action='store_true')
parser.add_option("-g", "--gui", help="show graphical policy editor", action='store_true')
parser.add_option("-m", "--main", help="name of the file to execute")
parser.add_option("-i", "--import", help="import from files, not from the network", action='store_true')
parser.add_option("-l", "--list", help="list all known interfaces", action='store_true')
parser.add_option("-r", "--refresh", help="refresh all used interfaces", action='store_true')
parser.add_option("-v", "--verbose", help="more verbose output", action='count')
parser.add_option("-V", "--version", help="display version information", action='store_true')
parser.disable_interspersed_args()

(options, args) = parser.parse_args()

if options.verbose:
	logger = logging.getLogger()
	if options.verbose == 1:
		logger.setLevel(logging.INFO)
	else:
		logger.setLevel(logging.DEBUG)

from zeroinstall.injector import model, download, autopolicy, namespaces

if options.list:
	if len(args) == 0:
		match = None
	elif len(args) == 1:
		match = args[0].lower()
	else:
		parser.print_help()
		sys.exit(1)
	from zeroinstall.injector.iface_cache import iface_cache
	for i in iface_cache.list_all_interfaces():
		if match and match not in i.lower(): continue
		print i
	sys.exit(0)

if options.version:
	import zeroinstall
	print "0launch (zero-install) " + zeroinstall.version
	print "Copyright (C) 2005 Thomas Leonard"
	print "This program comes with ABSOLUTELY NO WARRANTY,"
	print "to the extent permitted by law."
	print "You may redistribute copies of this program"
	print "under the terms of the GNU General Public License."
	print "For more information about these matters, see the file named COPYING."
	sys.exit(0)

if len(args) < 1:
	if options.gui:
		args = [namespaces.injector_gui_uri]
		options.download_only = True
	else:
		parser.print_help()
		sys.exit(1)

try:
	if getattr(options, 'import'):
		from zeroinstall.injector import gpg, handler
		from zeroinstall.injector.iface_cache import iface_cache
		from xml.dom import minidom
		for x in args:
			if not os.path.isfile(x):
				raise model.SafeException("File '%s' does not exist" % x)
			logging.info("Importing from file '%s'", x)
			signed_data = file(x)
			data, sigs = gpg.check_stream(signed_data)
			doc = minidom.parseString(data.read())
			uri = doc.documentElement.getAttribute('uri')
			assert uri
			iface = iface_cache.get_interface(uri)
			logging.info("Importing information about interface %s", iface)
			signed_data.seek(0)
			iface_cache.check_signed_data(iface, signed_data, handler.Handler())
		sys.exit(0)
	
	if getattr(options, 'add_feed'):
		from zeroinstall.injector import iface_cache, writer
		from xml.dom import minidom
		for x in args:
			x = os.path.realpath(x)
			if not os.path.isfile(x):
				raise model.SafeException("File '%s' does not exist" % x)
			logging.info("Reading interface file '%s'", x)
			doc = minidom.parse(x)
			uri = doc.documentElement.getAttribute('uri')
			if not uri:
				raise model.SafeException("Missing uri attribute in interface file '%s'" % x)
				continue
			iface = iface_cache.iface_cache.get_interface(uri)
			if not iface.name:
				print "Warning: unknown interface '%s'" % uri
			if x in iface.feeds:
				print "Feed '%s' is already registered." % x
				continue
			if options.dry_run:
				print "Would add this file as a feed for '%s'" % iface.get_name()
				continue

			iface.feeds.append(x)
			writer.save_interface(iface)
			print "Feed list for interface '%s' is now:" % iface.get_name()
			for f in iface.feeds:
				print "- " + f
		sys.exit(0)
	
	iface_uri = model.canonical_iface_uri(args[0])

	# Singleton instance used everywhere...
	policy = autopolicy.AutoPolicy(iface_uri,
				download_only = bool(options.download_only),
				dry_run = options.dry_run)

	if options.gui is None and os.environ.get('DISPLAY', None):
		if options.refresh:
			options.gui = True
		else:
			options.gui = policy.need_download()
		if options.gui:
			# If we need to download anything, we might as well
			# refresh all the interfaces first. Also, this triggers
			# the 'checking for updates' box, which is non-interactive
			# when there are no changes to the selection.
			options.refresh = True
			logging.info("Need to download; switching to GUI mode")
except model.SafeException, ex:
	print >>sys.stderr, ex
	sys.exit(1)

if options.gui:
	policy.set_root(namespaces.injector_gui_uri)

	# Try to start the GUI without using the network.
	# The GUI can refresh itself if it wants to.
	policy.freshness = 0
	policy.network_use = model.network_minimal

	prog_args = [iface_uri] + args[1:]
	# Options apply to actual program, not GUI
	if options.download_only:
		policy.download_only = False
		prog_args.insert(0, '--download-only')
	if options.refresh:
		options.refresh = False
		prog_args.insert(0, '--refresh')
	if options.main:
		prog_args = ['--main', options.main] + prog_args
		options.main = None
else:
	prog_args = args[1:]

try:
	policy.download_and_execute(prog_args, refresh = bool(options.refresh), main = options.main)
except model.SafeException, ex:
	print >>sys.stderr, ex
	sys.exit(1)
except autopolicy.NeedDownload, ex:
	print ex
	sys.exit(0)
