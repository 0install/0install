#!/usr/bin/env python
import os, sys

__builtins__._ = lambda x: x

if len(sys.argv) < 3:
	print "Usage: injector INTERFACE PROG [ARGS]"
	print "PROG is a relative path inside an implementation of INTERFACE. Eg:"
	print "injector /uri/0install/site/myprog.xml bin/myprog --help"
	sys.exit(1)
interface_uri = os.path.realpath(sys.argv[1])
prog = sys.argv[2]
prog_args = sys.argv[3:]

import model
from policy import Policy
import download

import shutil
import sys
import gpg

# Singleton instance used everywhere...
policy = Policy(interface_uri)
policy.recalculate()

while True:
	starting = [d for d in policy.downloads.values() if d.status == download.download_starting]
	if not starting: break

	if len(starting) > 1:
		print "Need to download:"
		for dl in starting:
			print "- " + dl.url
	dl = starting[0]
	print "Fetching", dl.url

	try:
		stream = dl.start()
		shutil.copyfileobj(file(dl.url), stream)
	except Exception, ex:
		print >>sys.stderr, "Download failed:", ex
		dl.status = download.download_failed
	else:
		try:
			policy.check_signed_data(dl)
		except gpg.BadSignature, ex:
			print >>sys.stderr, "\n*** ERROR processing downloaded interface!"
			print >>sys.stderr, "Interface:", dl.url
			print >>sys.stderr, ex, "\n"
			# Carry on...

import run

try:
	run.execute(policy, prog, prog_args)
except model.SafeException, ex:
	print >>sys.stderr, ex
	if policy.network_use != model.network_full:
		print >>sys.stderr, "Retrying with network use = full"
		policy.network_use = model.network_full	
		policy.recalculate()
		run.execute(policy, prog, prog_args)
